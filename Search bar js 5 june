//version 1.06
function getAcLocale(currencyCode) {
    let locale
    switch (currencyCode.toLowerCase()) {
        case 'eur':
            locale = 'de-DE'
            break

        case 'gbp':
            locale = 'en-GB'
            break

        case 'afn':
            locale = 'af-AF'
            break

        case 'usd':
        default:
            locale = 'en-US'
            break
    }

    return locale
}
function formatAcPrice(priceList, currencyCode) {
    let price
    if (currencyCode in priceList) {
        price = priceList[currencyCode]
    } else {
        price = Object.values(priceList)[0]
    }

    return new Intl.NumberFormat(getAcLocale(currencyCode), {
        style: 'currency',
        currency: currencyCode,
    }).format(price)
}

function formatAcPriceRangePrice(value, compare, locale, currencyCode) {
    let price
    if (value === 0 && compare === 0) {
        return null
    } else if (value === 0 && compare > 0) {
        price = compare
    } else {
        price = value
    }

    return new Intl.NumberFormat(locale, {
        style: 'currency',
        currency: currencyCode,
    }).format(price)
}

function formatAcPriceRange(products, currencyCode) {
    let min = 0
    let max = 0

    for (const key in products) {
        const currencyValue = (products[key].prices && products[key].prices[currencyCode]) || 0

        if (min === 0 || currencyValue < min) {
            min = currencyValue
        }
        if (max === 0 || currencyValue > max) {
            max = currencyValue
        }
    }

    const locale = getAcLocale(currencyCode)
    return {
        min: formatAcPriceRangePrice(min, max, locale, currencyCode),
        max: formatAcPriceRangePrice(max, min, locale, currencyCode),
    }
}

const autocompleteFilters = []
if (!algoliaAutocompleteConfig.showOutOfStockItems) {
    autocompleteFilters.push('in_stock>0')
}

async function getUserTokenAsync() {
    return new Promise((resolve, reject) => {
        aa('getUserToken', {}, (err, userToken) => {
            if (err) {
                reject(err)
            } else {
                resolve(userToken)
            }
        })
    })
}

const autocompleteOptions = {
    debug: algoliaAutocompleteConfig.debug_mode,
    insights: algoliaAutocompleteConfig.isInsightsEnabled,
    onSubmit({ state }) {
        const encodedQuery = encodeURIComponent(state.query)

        if (algoliaAutocompleteConfig.isInstantSearchEnabled) {
            window.location.href = `${algoliaAutocompleteConfig.instantSearchUrl}?search_query=${encodedQuery}`
        } else {
            window.location.href = `/search.php?search_query=${encodedQuery}`
        }
    },
    getSources() {
        return [
            {
                sourceId: 'querySuggestions',
                getItemInputValue: ({ item }) => item.query,
                async getItems({ query }) {
                    let algoliaUserToken
                    try {
                        algoliaUserToken = await getUserTokenAsync()
                    } catch (e) {}
                    return getAlgoliaResults({
                        searchClient: autocompleteClient,
                        queries: [
                            {
                                indexName: algoliaAutocompleteConfig.indexName,
                                query,
                                distinct: algoliaAutocompleteConfig.isDistinct,
                                params: {
                                    hitsPerPage: algoliaAutocompleteConfig.hitsPerPage,
                                    filters: autocompleteFilters.join(' AND '),
                                },
                                userToken: algoliaUserToken,
                            },
                        ],
                    })
                },
                templates: {
                    header({ items, html }) {
                        constdata = items;
                        let countcat = 0;
                        constdata.forEach(element => {
                            const internalcat = element.categories.lvl0[0]
                            if(internalcat === 'Internal'){
                                countcat++;
                            }
                        })
                        if(countcat === 0){
                            return html`
                                <span class="aa-SourceHeaderTitle">Products</span>
                                <div class="aa-SourceHeaderLine"></div>
                            `
                        }
                    },
                    item({ item, html, state }) {
                        const catlvl0 = item.categories.lvl0[0]
                        if(catlvl0 !== 'Internal'){
                            const insights = state.context.algoliaInsightsPlugin.insights
                            let addToCartParam
                            let price
                            if (algoliaAutocompleteConfig.recordType === 'variant') {
                                addToCartParam = `sku=${item.sku}`
                                price = formatAcPrice(
                                    item.prices,
                                    algoliaAutocompleteConfig.currentCurrencyCode
                                )
                            } else if (algoliaAutocompleteConfig.recordType === 'product') {
                                addToCartParam = `product_id=${item.objectID}`
                                const priceRange = formatAcPriceRange(
                                    item.variants,
                                    algoliaAutocompleteConfig.currentCurrencyCode
                                )

                                if (priceRange.min === null && priceRange.max === null) {
                                    price = `View For Pricing`
                                } else if (priceRange.min !== priceRange.max) {
                                    price = `${priceRange.min} - ${priceRange.max}`
                                } else {
                                    price = priceRange.min
                                }
                            }
                            if(item.image_url){
                            return html`
                                <a class="aa-GridItem" href="${item.url}">
                                    <div class="aa-ItemContentBody">
                                        <div class="aa-ItemPicture">
                                            <img src="${item.image_url}" alt="${item.name}" />
                                        </div>
                                        <div class="aa-ItemContentNameWrapper">
                                            <div class="aa-ItemContentTitle">
                                                <span>${item.name}</span>
                                            </div>
                                        </div>
                                        <div class="aa-ItemContentBodyFooter">
                                            <div class="aa-ItemContentPrice">${price}</div>
                                            <a
                                                class="add-to-cart"
                                                onClick="${(event) => {
                                                    event.preventDefault()
                                                    event.stopPropagation()
                                                    insights.convertedObjectIDsAfterSearch({
                                                        eventName: 'Product Added To Cart',
                                                        index: item.__autocomplete_indexName,
                                                        objectIDs: [item.objectID],
                                                        queryID: item.__autocomplete_queryID,
                                                    })

                                                    window.location = `/cart.php?action=add&${addToCartParam}`
                                                }}"
                                            >
                                                <svg
                                                    viewBox="0 0 24 24"
                                                    width="18"
                                                    height="18"
                                                    fill="currentColor"
                                                >
                                                    <path
                                                        d="M19 5h-14l1.5-2h11zM21.794 5.392l-2.994-3.992c-0.196-0.261-0.494-0.399-0.8-0.4h-12c-0.326 0-0.616 0.156-0.8 0.4l-2.994 3.992c-0.043 0.056-0.081 0.117-0.111 0.182-0.065 0.137-0.096 0.283-0.095 0.426v14c0 0.828 0.337 1.58 0.879 2.121s1.293 0.879 2.121 0.879h14c0.828 0 1.58-0.337 2.121-0.879s0.879-1.293 0.879-2.121v-14c0-0.219-0.071-0.422-0.189-0.585-0.004-0.005-0.007-0.010-0.011-0.015zM4 7h16v13c0 0.276-0.111 0.525-0.293 0.707s-0.431 0.293-0.707 0.293h-14c-0.276 0-0.525-0.111-0.707-0.293s-0.293-0.431-0.293-0.707zM15 10c0 0.829-0.335 1.577-0.879 2.121s-1.292 0.879-2.121 0.879-1.577-0.335-2.121-0.879-0.879-1.292-0.879-2.121c0-0.552-0.448-1-1-1s-1 0.448-1 1c0 1.38 0.561 2.632 1.464 3.536s2.156 1.464 3.536 1.464 2.632-0.561 3.536-1.464 1.464-2.156 1.464-3.536c0-0.552-0.448-1-1-1s-1 0.448-1 1z"
                                                    />
                                                </svg>
                                            </a>
                                        </div>
                                    </div>
                                </a>
                            `}else{
                            return html`
                                <a class="aa-GridItem" href="${item.url}">
                                    <div class="aa-ItemContentBody">
                                        <div class="aa-ItemPicture">
                                            <img src="https://cdn11.bigcommerce.com/s-dea51z7cy/images/stencil/original/image-manager/product-default.png?t=1717262123" alt="${item.name}" />
                                        </div>
                                        <div class="aa-ItemContentNameWrapper">
                                            <div class="aa-ItemContentTitle">
                                                <span>${item.name}</span>
                                            </div>
                                        </div>
                                        <div class="aa-ItemContentBodyFooter">
                                            <div class="aa-ItemContentPrice">${price}</div>
                                            <a
                                                class="add-to-cart"
                                                onClick="${(event) => {
                                                    event.preventDefault()
                                                    event.stopPropagation()
                                                    insights.convertedObjectIDsAfterSearch({
                                                        eventName: 'Product Added To Cart',
                                                        index: item.__autocomplete_indexName,
                                                        objectIDs: [item.objectID],
                                                        queryID: item.__autocomplete_queryID,
                                                    })

                                                    window.location = `/cart.php?action=add&${addToCartParam}`
                                                }}"
                                            >
                                                <svg
                                                    viewBox="0 0 24 24"
                                                    width="18"
                                                    height="18"
                                                    fill="currentColor"
                                                >
                                                    <path
                                                        d="M19 5h-14l1.5-2h11zM21.794 5.392l-2.994-3.992c-0.196-0.261-0.494-0.399-0.8-0.4h-12c-0.326 0-0.616 0.156-0.8 0.4l-2.994 3.992c-0.043 0.056-0.081 0.117-0.111 0.182-0.065 0.137-0.096 0.283-0.095 0.426v14c0 0.828 0.337 1.58 0.879 2.121s1.293 0.879 2.121 0.879h14c0.828 0 1.58-0.337 2.121-0.879s0.879-1.293 0.879-2.121v-14c0-0.219-0.071-0.422-0.189-0.585-0.004-0.005-0.007-0.010-0.011-0.015zM4 7h16v13c0 0.276-0.111 0.525-0.293 0.707s-0.431 0.293-0.707 0.293h-14c-0.276 0-0.525-0.111-0.707-0.293s-0.293-0.431-0.293-0.707zM15 10c0 0.829-0.335 1.577-0.879 2.121s-1.292 0.879-2.121 0.879-1.577-0.335-2.121-0.879-0.879-1.292-0.879-2.121c0-0.552-0.448-1-1-1s-1 0.448-1 1c0 1.38 0.561 2.632 1.464 3.536s2.156 1.464 3.536 1.464 2.632-0.561 3.536-1.464 1.464-2.156 1.464-3.536c0-0.552-0.448-1-1-1s-1 0.448-1 1z"
                                                    />
                                                </svg>
                                            </a>
                                        </div>
                                    </div>
                                </a>
                            `
                            }
                        }
                    },
                    footer({ items, state, html }) {
                        constdata = items;
                        let countcat = 0;
                        constdata.forEach(element => {
                            const internalcat = element.categories.lvl0[0]
                            if(internalcat === 'Internal'){
                                countcat++;
                            }
                        })
                        if(countcat === 0){
                            if (algoliaAutocompleteConfig.isInstantSearchEnabled) {
                                return html`
                                    <a
                                        class="show-all-products-btn"
                                        href="${algoliaAutocompleteConfig.instantSearchUrl}?search_query=${encodeURIComponent(
                                            state.query
                                        )}"
                                        >Show all products</a
                                    >
                                `
                            }
                        }else{
                            return html` <div>No results found</div> `
                        }
                    },
                    noResults({ html }) {
                        return html` <div>No results found</div> `
                    },
                },
            },
        ]
    },
}

const { autocomplete, getAlgoliaResults } = window['@algolia/autocomplete-js']

const autocompleteClient = algoliasearch(
    algoliaAutocompleteConfig.appId,
    algoliaAutocompleteConfig.publicApiKey
)
autocompleteClient.addAlgoliaAgent('BigCommerce Integration')

let container
if (
    algoliaAutocompleteConfig.algolia_search_css_selector_mobile !== '' &&
    algoliaAutocompleteConfig.mobile_screen_size > 0 &&
    screen.width <= algoliaAutocompleteConfig.mobile_screen_size
) {
    // mobile
    container = document.querySelector(algoliaAutocompleteConfig.algolia_search_css_selector_mobile)
} else {
    // desktop
    container = document.querySelector(algoliaAutocompleteConfig.algolia_search_css_selector);

}
container.innerHTML = ''
const containerClasses = container.classList
containerClasses.add('aa-MainContainer')

autocomplete({
    container,
    ...autocompleteOptions,
})
